import os
import re
import argparse
from Bio import SeqIO
import copy

def recipient_stitch(recipient_cell_file, donor_cell_folder, output_directory, homology_lengths_dir):
    recipient_backbone_object = SeqIO.read(recipient_cell_file, 'gb')
    donor_files_list = os.listdir(donor_cell_folder)
    AscI = "GGCGCGCC"
    NotI = "GCGGCCGC"
    hx = "CGAGGGCTAGAATTACCTACCGGCCTCCACCATGCCTGCG"
    h3 = "GTACGGGCAACCCGAGAAGGCTGAGCCTGGACTCAACGGGTTGCTGGGTGGACTCCAGACTCGGGGCGACGACTCTTCACGCGCAGAGCAAGGGCGTCGAGCGGTCGTGAAAGTCTTAGTACCGCACGTGCCGACTCACTGGGGATATTGCCTGGAGCTGTACCGTTCTAGGGGGGGGAGGTTGGAGACCTCCTCTTCTCACGACTGGACCCGCGAGGGCCGCGTTGCCGGTTCCCCCAGAGGCTGAAGAACAAGGGCTTACTGTGGGCAGGGGGACGCCCATTCAGCGGCTGGCGCTTT"

    
    def extract_stitch_number(filename):
        
        match = re.search(r'fragment#(\d+)\.gbk', filename)
        if match:
            return int(match.group(1))
        return 0  

    
    donor_files_list.sort(key=extract_stitch_number)

    
    
    homology_lengths = []
    with open(homology_lengths_dir, 'r') as homology_file:
        for line in homology_file:
            homology_lengths.append(int(line.strip()))

    for filesname in donor_files_list:
        donor_file_path = os.path.join(donor_cell_folder, filesname)
        
       
        if not filesname.endswith(".gbk"):
            continue

        with open(donor_file_path, 'r', encoding='latin1') as donor_file:
            donor_object = SeqIO.read(donor_file, 'gb')

        if filesname == "fragment#1.gbk":
            
            hx_position_recipient = recipient_backbone_object.seq.find(hx)
            h3_position_recipient = recipient_backbone_object.seq.find(h3)
            h3_len = len(h3)
            
            h3_position_recipient_end = h3_position_recipient + h3_len
            
            hx_position_donor = donor_object.seq.find(hx)
            h3_position_donor = donor_object.seq.find(h3)
            h3_position_donor_end = h3_position_donor + h3_len

            re_sequence_before_hx = recipient_backbone_object[:hx_position_recipient]
            re_sequence_after_h3 = recipient_backbone_object[h3_position_recipient_end:]
            donor_sequence = donor_object[hx_position_donor:h3_position_donor_end]
            
            first_stitch = re_sequence_before_hx + donor_sequence + re_sequence_after_h3
            first_stitch.annotations["molecule_type"] = "DNA"

            output_file_path = os.path.join(output_directory, "stitch1.gbk")
            SeqIO.write(first_stitch, output_file_path, "genbank")
            recipient_backbone_object = copy.deepcopy(first_stitch)
            
        else:
            
            
            NotI_position_recipient = recipient_backbone_object.seq.find(NotI)
            h3_position_recipient = recipient_backbone_object.seq.find(h3)
            h3_len = len(h3)
            h3_position_recipient_end = h3_position_recipient + h3_len

            re_sequence_before_NotI = recipient_backbone_object[:NotI_position_recipient]
            re_sequence_after_h3 = recipient_backbone_object[h3_position_recipient_end:]

            AscI_position_donor = donor_object.seq.find(AscI)
            h3_position_donor = donor_object.seq.find(h3)
            h3_position_donor_end = h3_position_donor + h3_len

            fragment_number_str = filesname.replace("fragment#", "").split(".")[0]
            homology_length = homology_lengths[int(fragment_number_str) - 1]

            AscI_position_donor_homology = AscI_position_donor + 8 + homology_length
            donors_sequence = donor_object[AscI_position_donor_homology:h3_position_donor_end]

            n_stitch = re_sequence_before_NotI + donors_sequence + re_sequence_after_h3
            n_stitch.annotations["molecule_type"] = "DNA"

            current_stitch_number = fragment_number_str
          
            output_file_name = f"stitch{current_stitch_number}.gbk"
            output_file_path = os.path.join(output_directory, output_file_name)
            SeqIO.write(n_stitch, output_file_path, "genbank")
            
            recipient_backbone_object = copy.deepcopy(n_stitch)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Recipient Stitch Program')
    parser.add_argument('--recipient_backbone', required=True, help='Recipient cell GenBank file path')
    parser.add_argument('--donor_cell_folder', required=True, help='Donor cell GenBank files folder path')
    parser.add_argument('--stitch_result', required=True, help='Output directory for stitched files')
    parser.add_argument('--homology_lengths', required=True, help='Directory containing homology_lengths.txt')
    args = parser.parse_args()

    recipient_stitch(args.recipient_backbone, args.donor_cell_folder, args.stitch_result, args.homology_lengths)
